#include<iostream>
// #include <stdio.h>
#include <stdlib.h>
//#include <time.h>
// #include<iomanip>
// #include<vector>
// #include<random>
// #include<string>
// #include<algorithm>
using namespace std;

//Constantes:
const int N_Cartas=52;
const int N_Pilas=13;

//Colores:
char C[2]={'N','R'};
//Palos:
char P[4]={'E','D','T','C'};
//Números de asteriscos que se va imprimir para cada pila
int asteriscos[13]={0,1,2,3,4,5,6,0,0,0,0,0,23};

//Struct Carta: registro e información de cada carta del mazo
struct Carta{
  char Palo; //Palo
  int color; //Color
  int Ncarta; //Numero de carta
}CARTAS[N_Cartas];

//Struct Pila
struct Pila{
  Carta carta;
  Pila *siguiente;
}*PILA[N_Pilas]; //Pilas del 1-7 son de juego, Pilas del 8-11 son de salida, la Pila 12 es de reserva y la Pila 13 es de descarte.

//Prototipo de todas las funciones que se utilizarán en el programa
void inicializarCartas();
void barajearCartas();
void agregarCarta(Pila *&,Carta);
void quitarCarta(Pila *&,Carta &);
void inicializarPilas();
void repartirCartas();
void moverCarta(int a,int b);
void moverVariasCartas(int a,int b,int o);
void mostrarPila(int a);
void mostrarPilas();
int  longitud(int a);
void moverLareserva();
int gano();
void juego();
int jugadaValida(int a,int b,int c,int d);
void barajear();
Pila *intercambio(Pila *);

int main(){
  //Función principal
  juego();

  /*inicializarCartas();
  barajear_v2();
  for(int i = 0;i<52;i++){
    cout<<CARTAS[i].Ncarta<<"\t"<<CARTAS[i].Palo<<endl;
  }*/
  return 0;
}

void inicializarCartas(){
  //Función para inicializar el array de CARTAS
  int t = 0, m = 1, c = 1;
  for(int i = 0; i<N_Cartas;i++){
    //Establecemos el número y el palo
    CARTAS[i].Ncarta = m;
    CARTAS[i].Palo = P[t];
    //Establecemos su color de acuerdo al i-esimo elemento del vector C[2]
    if(c%2==0){
      CARTAS[i].color = 1;//Color rojo
    }else{
      CARTAS[i].color = 0;//Color negro
    }
    //Reestablecemos condiciones para un nuevo bloque de cartas (13)
    if(m%13==0){
      t++;//Cambiamos el palo
      m=0;//Se reinicia el numero de cartas
      c++;//Cambiamos el valor de c para cambiar el color del siguiente bloque de cartas
    }
    m++;//Se hace un incremento, ya que las cartas incializan en 1
    //cout<< CARTAS[i].Ncarta <<" "<<CARTAS[i].Palo<<endl; //Prueba de mostrar las cartas inicializadas
  }
}

void barajear(){
  //Función para barajear los elementos del array CARTAS
  srand(time(NULL));//Inicializamos el random
  for(int i=0;i<52;i++){
    //Variable que guarda una carta de forma temporal
    Carta t = CARTAS[i];
    //Variable con un número aleatorio 
    int x = rand()%52;
    //Intercambiamos las cartas
    CARTAS[i]=CARTAS[x];
    CARTAS[x]=t;
  }
}

/*void barajearCartas(){
  //Aparecen numero repetidos al ejecutar esta función :V
  cout<<"Cartas barajeadas: "<<endl;
  int num[N_Cartas];
  for(int i=0;i<N_Cartas;i++) num[i]=i+1;
  random_device rd;
  default_random_engine rng(rd());
  shuffle(begin(num),end(num), rng);
  for(int i=0;i<52;i++){
    Carta aux=CARTAS[num[i]];
    CARTAS[num[i]]=CARTAS[i];
    CARTAS[i]=aux;
    cout<< CARTAS[i].Ncarta <<" "<<CARTAS[i].Palo<<endl;
  }
}*/

void agregarCarta(Pila *&pila,Carta n){
  Pila *nueva_pila = new Pila();
  //Se crea una nueva pila, es decir, se reserva memoria
  nueva_pila->carta =n;
  //Se guarda un elemento de la pila dentro de 'carta'
  nueva_pila->siguiente =pila;
  //Para poder agrear más elementos a la pila 
  pila =nueva_pila;
  //Añade o agrega una carta a la pila
}

void quitarCarta(Pila *&pila,Carta &n){
  Pila *aux=pila;
  //Se crea una variable auxiliar de tipo nodo
  n=aux->carta;
  //Para 'saber' el dato al que queremos eliminar
  pila=aux->siguiente;
  //Para que pila deje de apuntar al elemento que se queria eliminar
  delete aux;
  //Elimina o extrae una carta de la pila
}

void inicializarPilas(){
  //Función para inicializar el array de pilas(PILA)
  for (int i= 0; i<N_Pilas ; i++) {
    //Las 13 pilas se inicializan vacías: "Sin elementos en su interior"
    PILA[i]=NULL;
  }
}

void repartirCartas(){
  //Función para repartir las cartas
  int m=0;
  //Inicializamos las pilas
  inicializarPilas();
  //Llenamos las pilas 1-7
  for(int i=0;i<7;i++){
    for(int j=i;j<7;j++){
      //Agregamos una carta en la pila correspondiente
      agregarCarta(PILA[j],CARTAS[m]);
      m++;
    }
  }
  //Llenamos la pila 12
  for(int i=28;i<N_Cartas;i++){
    agregarCarta(PILA[12],CARTAS[i]);
  }
}

void moverCarta(int a,int b){
  //Función para mover una sola carta
  if(longitud(a)==asteriscos[a]+1 && asteriscos[a]>0){
    asteriscos[a]--;//Si la pila tiene más de un elemento, decrementa la cantidad de cartas boca abajo
  }
  //Quitamos una carta de la primera pila y la agregamos a la segunda pila
  agregarCarta(PILA[b],PILA[a]->carta);
  quitarCarta(PILA[a],PILA[a]->carta);
}

void moverVariasCartas(int a,int b,int o){
  //Función para mover varias cartas
  Carta aux[o];
  if(longitud(a)==asteriscos[a]+o && asteriscos[a]>0){
    asteriscos[a]--;//Si la pila tiene más de un elemento, decrementa la cantidad de cartas boca abajo
  }
  for(int i=0;i<o;i++){
    //Guardamos las cartas en un array auxiliar y las quitamos de la primera pila
    aux[i]=PILA[a]->carta;
    quitarCarta(PILA[a],PILA[a]->carta);
  }
  for(int i=0;i<o;i++){
    //Quitamos las cartas del auxiliar y las guardamos en la nueva pila
    agregarCarta(PILA[b],aux[o-i-1]);
  }
}

//Función que calcula el tamaño de una pila
int longitud(int a){
  Carta aux[N_Cartas];
  int cont=0;
  while(PILA[a]!=NULL){
    //Mientras la pila sea distinta de NULL, guarda los elementos en un array auxiliar y suma al contador
    aux[cont]=PILA[a]->carta;
    quitarCarta(PILA[a], PILA[a]->carta);
    cont++;
  }
  for(int i=0;i<cont;i++){
    //Devuelve los elementos al array PILA[a]
    agregarCarta(PILA[a],aux[cont-i-1]);
  }
  //Retorna la longitud de la pila
  return cont;
}

//Función que retorna una pila nueva, donde su base es es el top y su top es la base de la pila anterior
Pila *intercambio(Pila *pointer){
  Pila *pilareturn = NULL;
  while(pointer!=NULL){
    agregarCarta(pilareturn, pointer->carta);
    pointer = pointer->siguiente;
  }
  return pilareturn;
}

void moverLareserva(){
  //Función para mover cartas entre la reserva y descarte
  moverVariasCartas(12,11, longitud(12));
  moverCarta(11,12);
  moverVariasCartas(11,12, longitud(11));
}

void mostrarPila(int a){
  //Función para mostrar una pila
  Pila *pointer = PILA[a];
  pointer = intercambio(pointer);
  int count=0;
  //Si la longitud de la pila no es 0 entonces se imprime
  if(longitud(a)!=0){
    //Imprime las cartas que no están en el tope
    for(int i=0;i< asteriscos[a] ;i++){
      cout<<"[**]";
      pointer = pointer->siguiente;
    }
    //Imprime la carta del tope y las cartas que se han movido
    while(count!=(longitud(a)-asteriscos[a])){
      count++;
      cout << pointer->carta.Ncarta <<pointer->carta.Palo<< "("<< C[pointer->carta.color] << ")";
      pointer = pointer->siguiente;
    }
    cout<<endl;
  }else{
    cout<<endl;
  }
}

void mostrarPilas(){
  //Función para mostrar todas las pilas
  //Muestra las pilas del 1 al 7
  cout<<"Pilas de juego: "<<endl;
  for(int i=0;i<7;i++){
    cout<<"Pila "<<i+1<<": ";
    mostrarPila(i);
  }
  //Muestra las pilas del 8 al 11
  cout<<"\nPilas de salida: "<<endl;
  for(int i=7;i<11;i++){
    cout<<"Pila "<<i+1<<": ";
    mostrarPila(i);
  }
  //Muestra la pila 12 y 13 (reserva y descarte)
  cout<<"\nPila de reserva: "<<endl;
  cout<<"Pila "<<12<<": "<<"[**]"<<endl;
  mostrarPila(11);
  cout<<"Pila de descarte: "<<endl;
  cout<<"Pila "<<13<<": ";
  cout <<PILA[12]->carta.Ncarta <<PILA[12]->carta.Palo<< "("<< C[PILA[12]->carta.color] << ")";
}

int gano(){
  Carta aux[13];
  int a[4]={1,1,1,1};
  if(longitud(7)==13 && longitud(8)==13 && longitud(9)==13 && longitud(10)==13){
    for(int i=7;i<11;i++){
      for(int j=0;j<13;j++){
        aux[j]=PILA[i]->carta;
        quitarCarta(PILA[i],PILA[i]->carta);
        if(j>0){
          if(aux[j].color!=aux[j-1].color || aux[j].Palo != aux[j-1].Palo){
            a[i-7] = 0;
          }
        }
        if(aux[j].Ncarta != 12-j){
          a[i-7]=0;
        }
      }
      for(int j=0;j<13;j++){
        agregarCarta(PILA[i],aux[12-j]);
      }
    }
    if(a[0]==1 && a[1]==1 && a[2]==1 && a[3]==1){
      return 1;
    }else{
      return 0;
    }
  }else{
    return 0;
  }
}

int jugadaValida(int a,int b,int c,int d){
  int valor=1;
  Carta aux[d];
  if(d>longitud(b)){
    valor=0;
  }else{
    if(c<7){
      if(d==1){
        if(longitud(c)==0){
          if(PILA[b]->carta.Ncarta != 13){
            valor=0;
          }
        }else{
          if(PILA[b]->carta.Ncarta+1 != PILA[c]->carta.Ncarta){
            valor=0;
          }
          if(PILA[b]->carta.color != 1-PILA[c]->carta.color){
            valor=0;
          }
        }
      }else{
        for(int i=1;i<d;i++){
          aux[i]=PILA[b]->carta;
          quitarCarta(PILA[b],PILA[b]->carta);
        }
        for(int i=1;i<d;i++){
          agregarCarta(PILA[b],aux[d-i-1]);
        }
        if(aux[d-1].Ncarta+1 != PILA[c]->carta.Ncarta){
          valor=0;
        }
        if(aux[d-1].color != 1-PILA[c]->carta.color){
          valor=0;
        }
      }
    }else if(c>=7 && c<11){
      if(longitud(c)==0){
        if(PILA[b]->carta.Ncarta !=1){
          valor=0;
        }
      }else{
        if(PILA[b]->carta.Ncarta -1 != PILA[c]->carta.Ncarta){
          valor=0;
        }
        if(PILA[b]->carta.color != PILA[c]->carta.color){
          valor=0;
        }
      }
    }else{
      valor=0;
    }
  }
  return valor;
}

void juego(){
  //Mostrar el juego
  int a,b,c,d,temp;
  //Inicializamos, barajeamos y repartimos las cartas
  inicializarCartas();
  barajear();
  repartirCartas();
  do{
    mostrarPilas();
    cout<<"\n\nElija una de las opciones: "<<endl;
    cout<<"\n1.-Mover una carta.";
    cout<<"\n2.-Mover varias cartas.";
    cout<<"\n3.-Mover la reserva."<<endl;
    cin>>a;
    if(a==1){
      d=1;
      cout<<"Ingrese la pila de donde sacara la carta: ";cin>>b;
      cout<<"Ingrese la pila de llegada de la carta: ";cin>>c;
      if(jugadaValida(a,b-1,c-1,d) ==1){
        moverCarta(b-1,c-1);
      } 
    }else if(a==2){
      cout<<"Ingrese la pila de donde sacara la carta: ";cin>>b;
      cout<<"Ingrese la pila de llegada de la carta: ";cin>>c;
      cout<<"Ingrese el numero de cartas que desea mover: ";cin>>d;
      if(jugadaValida(a,b-1,c-1,d) == 1){
        moverVariasCartas(b-1,c-1,d);
      }
    }else if(a==3){
      moverLareserva();
    }
    cin.get();    
    system("clear");
  }while(gano()==0);
  cout<<"Felicidades ganaste"<<endl;
}
